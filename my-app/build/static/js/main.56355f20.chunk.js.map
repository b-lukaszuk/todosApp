{"version":3,"sources":["components/AuthProvider.js","components/Button.js","conteners/LandingPage.js","utils/localStorage.js","conteners/todos/TodoItem.js","components/Input.js","conteners/header/TodoAdder.js","components/Checkbox.js","conteners/header/TodoFilter.js","conteners/header/TodoSorter.js","conteners/header/TodoHeader.js","conteners/todos/TodoRow.js","conteners/todos/TodoList.js","conteners/TodosPage.js","App.js","reportWebVitals.js","index.js"],"names":["authContext","React","AuthProvider","children","isAuthenticated","setIsAuthenticated","history","useHistory","value","login","replace","logout","Provider","Button","props","className","onClick","btnText","LandingPage","useState","userName","setUserName","userPassowrd","setUserPassword","useContext","maxLength","placeholder","type","onChange","e","target","required","trim","alert","class","href","getKeyFromLocalStorage","key","defaultValue","result","JSON","parse","window","localStorage","getItem","pushDictToLocalStorage","dictionary","Object","entries","setItem","stringify","isKeyInLocalStorage","length","TodoItem","id","useParams","todoId","parseInt","todo","taskId","todos","i","getTodo","name","completed","Input","TodoAdder","onChangeInput","onClickButton","Checkbox","checked","TodoFilter","filterMessage","TodoSorter","butMessage","TodoHeader","adderTaskToAdd","adderUpdateTaskToAdd","adderAddTaskToList","remAllBtnRemAllTasks","sorterSortTasks","sorterSortOrder","filter1Msg","filter1Checked","filter1OnChange","filter2Msg","filter2Checked","filter2OnChange","trimMessage","msg","noOfChars","noOfCharsToLeave","slice","TodoRow","taskName","item","isCompleted","to","title","toggleCompleted","TodoList","listName","map","newListItem","TodosPage","todosInitialState","urlForTodos","useReducer","state","action","payload","filter","sortAsc","sort","t1","t2","localeCompare","todosState","todosDispatch","useEffect","a","fetch","response","json","data","modifData","console","log","fetchData","taskToAdd","setTaskToAdd","setSortAsc","showCompleted","setShowCompleted","showPending","setShowPending","remTaskFromList","idToRemove","newTaskDesc","match","newId","usedIds","Math","max","getFirstFreeId","t","App","ProtectedRoute","pathname","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56355f20.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst authContext = React.createContext();\n\nfunction AuthProvider({ children }) {\n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\n    const history = useHistory();\n\n    function login() {\n        history.replace(\"/todos\");\n        setIsAuthenticated(true);\n    }\n\n    function logout() {\n        history.replace(\"/\");\n        setIsAuthenticated(false);\n    }\n\n    const value = { isAuthenticated, login, logout };\n    return <authContext.Provider value={value}>{children}</authContext.Provider>;\n}\n\nexport { AuthProvider, authContext };\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nfunction Button(props) {\n    return (\n        <button className={props.className}\n            onClick={() => props.onClick()}>\n            {props.btnText}\n        </button>\n    );\n}\n\nexport default Button;\n","import React, { useState, useContext } from \"react\";\n\nimport { authContext } from \"../components/AuthProvider\";\nimport Button from \"../components/Button\";\n\nimport \"./LandingPage.css\";\n\nfunction LandingPage(props) {\n    const [userName, setUserName] = useState(\"\");\n    const [userPassowrd, setUserPassword] = useState(\"\");\n\n    let { login } = useContext(authContext);\n\n    const handleLogin = () => {\n        if (userName.trim() !== \"\" && userPassowrd === \"1234\") {\n            login();\n        } else {\n            alert(\"Incorrect user name or password\");\n        }\n    };\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"centered-div\">\n                    <h2>Enter Your data below and go to Your TODOS</h2>\n                    <fieldset>\n                        <legend>Your name</legend>\n                        <input\n                            maxLength=\"18\"\n                            placeholder=\"Enter Your Name\"\n                            type=\"text\"\n                            value={userName}\n                            onChange={(e) => {\n                                setUserName(e.target.value);\n                            }}\n                            required\n                        />\n                    </fieldset>\n                    <fieldset>\n                        <legend>Your Password</legend>\n                        <input\n                            maxLength=\"18\"\n                            placeholder=\"Enter Your password\"\n                            type=\"password\"\n                            required\n                            value={userPassowrd}\n                            onChange={(e) => {\n                                setUserPassword(e.target.value);\n                            }}\n                        />\n                    </fieldset>\n                    <br />\n                </div>\n            </div>\n            <div className=\"container\">\n                <Button className=\"normalBut\" onClick={handleLogin} btnText=\"Log In\" />\n            </div>\n            <div class=\"centered-div\">\n                <p>Please be informed that:</p>\n                <ul>\n                    <li>\n                        once You are logged-in the page may dowload mock todos from{\" \"}\n                        <a href=\"https://jsonplaceholder.typicode.com/users/1/todos\">\n                            This web page\n                        </a>\n                    </li>\n                    <li>\n                        once You are logged-in the page may read todos from{\" \"}\n                        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage/\">\n                            localStorage\n                        </a>\n                    </li>\n                    <li>\n                        once You are logged-in the page will store the todos in{\" \"}\n                        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage/\">\n                            localStorage\n                        </a>\n                    </li>\n                </ul>\n                <p>\n                    If You don't want any of this to happen then don't log in and leave the page\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default LandingPage;\n","/**\n * returns key from localStorage or defaultValue if no key is there\n */\nfunction getKeyFromLocalStorage(key, defaultValue) {\n    let result = JSON.parse(window.localStorage.getItem(key));\n    // if locStor does not cont result we get null, so\n    return result !== null ? result : defaultValue;\n}\n\n/**\n * pushes {key1: value1, key2?: value2?, ...} from dict to localStorage\n */\nfunction pushDictToLocalStorage(dictionary) {\n    for (const [key, value] of Object.entries(dictionary)) {\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }\n}\n\nfunction isKeyInLocalStorage(key) {\n    let result = JSON.parse(window.localStorage.getItem(key));\n    let isIn = result !== null && result.length !== 0;\n    return isIn;\n}\n\nexport {\n    getKeyFromLocalStorage,\n    pushDictToLocalStorage,\n    isKeyInLocalStorage\n};\n","import React from \"react\";\n\nimport { getKeyFromLocalStorage } from \"../../utils/localStorage\";\nimport { useParams } from \"react-router-dom\";\n\nimport \"./TodoItem.css\";\n\nfunction TodoItem() {\n    const { id } = useParams();\n\n    const todoId = parseInt(id);\n    const todos = getKeyFromLocalStorage(\"todos\", []);\n    const getTodo = (taskId, todos) => {\n        for (let i = 0; i < todos.length; i++) {\n            if (todos[i].id === taskId) {\n                return todos[i];\n            }\n        }\n        return null;\n    };\n    const todo = getTodo(todoId, todos);\n\n    return (\n        <div className=\"container\">\n            <br /> <br />\n            {todo === null ? (\n                <div className=\"centered-div\">\n                    <p>No task of id: {todoId} found</p>\n                </div>\n            ) : (\n                    <div className=\"centered-div\">\n                        <p>\n                            <b>ID:</b> {todo.id}\n                        </p>\n                        <p>\n                            <b>Full Name:</b> {todo.name}\n                        </p>\n                        <p>\n                            <b>Completed:</b> {todo.completed ? \"Yes\" : \"No\"}\n                        </p>\n                    </div>\n                )}\n        </div>\n    );\n}\n\nexport default TodoItem;\n","import React from \"react\";\n\nimport \"./Input.css\";\n\nfunction Input(props) {\n    return (\n        <input\n            name=\"\"\n            maxLength={props.maxLength}\n            placeholder={props.placeholder}\n            type=\"text\"\n            value={props.value}\n            onChange={(e) => props.onChange(e)}\n        />\n    );\n}\n\nexport default Input;\n","import React from \"react\";\n\nimport Button from \"../../components/Button\";\nimport Input from \"../../components/Input\";\n\nfunction TodoAdder(props) {\n    return (\n        <div>\n            <Input\n                maxLength=\"18\"\n                placeholder=\"add task description...\"\n                value={props.value}\n                onChange={(e) => props.onChangeInput(e)}\n                required\n            />\n      &nbsp;\n            <Button\n                className=\"normalBut\"\n                onClick={() => props.onClickButton(props.value)}\n                btnText=\"Add to the list\"\n            />\n        </div>\n    );\n}\n\nexport default TodoAdder;\n","import React from \"react\";\n\nimport \"./Checkbox.css\";\n\nfunction Checkbox(props) {\n    return (\n        <input\n            name=\"\"\n            type=\"checkbox\"\n            checked={props.checked}\n            onChange={() => props.onChange()}\n        />\n    );\n}\n\nexport default Checkbox;\n","import React from \"react\";\n\nimport Checkbox from \"../../components/Checkbox\";\n\nfunction TodoFilter(props) {\n    return (\n        <div>\n            <Checkbox checked={props.checked}\n                onChange={() => props.onChange()} />{\" \"}\n            <span>{props.filterMessage} </span>\n        </div>\n    );\n}\n\nexport default TodoFilter;\n","import React from \"react\";\n\nimport Button from \"../../components/Button\";\n\nfunction TodoSorter(props) {\n    return (\n        <div>\n            <span>Sort by task description</span>\n      &nbsp;\n            <Button\n                className=\"normalBut\"\n                onClick={() => props.onClick()}\n                btnText={props.butMessage}\n            />\n        </div>\n    );\n}\n\nexport default TodoSorter;\n","import React from \"react\";\n\nimport Button from \"../../components/Button\";\nimport TodoAdder from \"./TodoAdder\";\nimport TodoFilter from \"./TodoFilter\";\nimport TodoSorter from \"./TodoSorter\";\n\nfunction TodoHeader(props) {\n    return (\n        <div>\n            <h1>Todo list</h1>\n            <TodoAdder\n                value={props.adderTaskToAdd}\n                onChangeInput={props.adderUpdateTaskToAdd}\n                onClickButton={props.adderAddTaskToList}\n            />\n            <br />\n            <Button\n                className=\"remBut\"\n                onClick={props.remAllBtnRemAllTasks}\n                btnText={\"\\u2716 Remove all tasks from the list\"}\n            />\n            <br /> <br />\n            <TodoSorter\n                onClick={props.sorterSortTasks}\n                butMessage={props.sorterSortOrder}\n            />\n            <br />\n            <TodoFilter\n                filterMessage={props.filter1Msg}\n                checked={props.filter1Checked}\n                onChange={props.filter1OnChange}\n            />\n            <TodoFilter\n                filterMessage={props.filter2Msg}\n                checked={props.filter2Checked}\n                onChange={props.filter2OnChange}\n            />\n            <br />\n        </div>\n    );\n}\n\nexport default TodoHeader;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Button from \"../../components/Button\";\nimport Checkbox from \"../../components/Checkbox\";\n\nimport \"./TodoRow.css\";\n\nfunction trimMessage(msg, noOfChars) {\n    let noOfCharsToLeave = noOfChars - 3;\n    if (msg.length < noOfCharsToLeave) {\n        return msg;\n    } else {\n        let newMsg = msg.slice(0, noOfCharsToLeave);\n        return newMsg + \"...\";\n    }\n}\n\nfunction TodoRow(props) {\n    const taskName = props.item.name;\n    const isCompleted = props.item.completed;\n    const todoId = props.item.id;\n    return (\n        // wstawia do tbody, wiec produkuje td\n        <tr>\n            <td className=\"name\">\n                <Link to={`/todos/${todoId}`}>\n                    <span title=\"click to see details\">&#9432;</span>\n                </Link>\n        &nbsp;&nbsp;\n        {trimMessage(taskName, 20)}\n            </td>\n            <td className=\"status\">\n                <Checkbox\n                    checked={isCompleted}\n                    onChange={() => props.toggleCompleted(todoId)}\n                />\n            </td>\n            <td>\n                <Button\n                    className=\"remBut\"\n                    onClick={() => props.onClickButton(todoId)}\n                    btnText={\"\\u2716 remove\"}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default TodoRow;\n","import React from \"react\";\n\nimport TodoRow from \"./TodoRow\";\n\nimport \"./TodoList.css\";\n\n/**\n * zwraca komponent TodoRow\n * @param {Object} item - task postaci {id: 123, name: \"costam\", completed: true|false}\n * @return komponent TodoRow\n */\nfunction newListItem(item, toggleCompleted, onClickButton) {\n    return (\n        <TodoRow\n            key={item.id}\n            item={item}\n            toggleCompleted={toggleCompleted}\n            onClickButton={onClickButton}\n        />\n    );\n}\n\nfunction TodoList(props) {\n    const todos = props.todos;\n    return (\n        <div className=\"TodoList\">\n            <h2>{props.listName}</h2>\n            {/* tabela, celem lepszego wyrownania elementow */}\n            <table>\n                <thead>\n                    <tr>\n                        <th className=\"name\">task</th>\n                        <th className=\"status\">completed?</th>\n                        <th>remove from list</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {todos.map((item) => {\n                        return newListItem(\n                            item,\n                            props.toggleCompleted,\n                            props.onClickButton\n                        );\n                    })}\n                </tbody>\n            </table>\n            <br />\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React, { useEffect, useState, useContext, useReducer } from \"react\";\n\nimport { authContext } from \"../components/AuthProvider\";\nimport Button from \"../components/Button\";\nimport {\n    getKeyFromLocalStorage,\n    isKeyInLocalStorage,\n    pushDictToLocalStorage,\n} from \"../utils/localStorage\";\nimport TodoHeader from \"./header/TodoHeader\";\nimport TodoList from \"./todos/TodoList\";\n\nfunction TodosPage() {\n\n    const { logout } = useContext(authContext);\n\n    const todosInitialState = {\n        todos: getKeyFromLocalStorage(\"todos\", []),\n    };\n    const todosReducer = (state, action) => {\n        switch (action.type) {\n            case \"todosLoad\":\n                return { ...state, todos: action.payload };\n            case \"todosAddOne\":\n                return { ...state, todos: [...state.todos, action.payload] };\n            case \"todosRemoveOne\":\n                return {\n                    ...state,\n                    todos: state.todos.filter((todo) => {\n                        return todo.id !== action.todoId;\n                    }),\n                };\n            case \"todosRemoveAll\":\n                return { ...state, todos: [] };\n            case \"todosToggleCompletedOne\":\n                return {\n                    ...state,\n                    todos: state.todos.map((todo) => {\n                        if (todo.id === action.todoId) {\n                            return { ...todo, completed: !todo.completed };\n                        } else {\n                            return todo;\n                        }\n                    }),\n                };\n            case \"todosSortAll\":\n                return {\n                    ...state,\n                    todos: action.sortAsc\n                        ? state.todos.sort((t1, t2) => t1.name.localeCompare(t2.name))\n                        : state.todos.sort((t1, t2) => t2.name.localeCompare(t1.name)),\n                };\n            default:\n                return state;\n        }\n    };\n\n    const urlForTodos = \"https://jsonplaceholder.typicode.com/users/1/todos\";\n    const [todosState, todosDispatch] = useReducer(\n        todosReducer,\n        todosInitialState\n    );\n\n    useEffect(() => {\n        async function fetchData() {\n            let response = await fetch(urlForTodos);\n            let data = await response.json();\n            let modifData = data.map((item) => {\n                return {\n                    id: item.id,\n                    name: item.title,\n                    completed: item.completed,\n                };\n            });\n            if (!isKeyInLocalStorage(\"todos\")) {\n                console.log(\"fetching todos from url\");\n                todosDispatch({ type: \"todosLoad\", payload: modifData });\n            } else {\n                console.log(\"preserving todos from localStorage\");\n            }\n        }\n        fetchData();\n    }, []);\n    // pushes todos to localStorage\n    useEffect(() => {\n        pushDictToLocalStorage({ todos: todosState.todos });\n    }, [todosState]);\n\n    const [taskToAdd, setTaskToAdd] = useState(\"\");\n\n    const [sortAsc, setSortAsc] = useState(true);\n\n    const [showCompleted, setShowCompleted] = useState(\n        getKeyFromLocalStorage(\"showCompleted\", true)\n    );\n    // pushes showCompleted to localStorage\n    useEffect(() => {\n        pushDictToLocalStorage({ showCompleted: showCompleted });\n    }, [showCompleted]);\n\n    const [showPending, setShowPending] = useState(\n        getKeyFromLocalStorage(\"showPending\", true)\n    );\n    // pushes showPending to localStorage\n    useEffect(() => {\n        pushDictToLocalStorage({ showPending: showPending });\n    }, [showPending]);\n\n    /**\n     * obsluga checkboxa (checked|unchecked) przy \"Show Completed\"\n     */\n    const toggleShowCompleted = () => {\n        setShowCompleted(!showCompleted);\n    };\n\n    /**\n     * obsluga checkboxa (checked|unchecked) przy \"Show Pending\"\n     */\n    const toggleShowPending = () => {\n        setShowPending(!showPending);\n    };\n\n    /**\n     * sortuje taski alfabetycznie po task name\n     * sortuje na przemian raz rosnaco, raz malejaco\n     * zmienia todos - [{id: 123, name: \"costam\", completed: true|false}, ...]\n     * zmienia sortAsc\n     */\n    const sortTasks = () => {\n        todosDispatch({ type: \"todosSortAll\", sortAsc: sortAsc });\n        setSortAsc(!sortAsc);\n    };\n\n    /**\n     * zmienia stan (completed) danego taska\n     * @param {number} taskId - idTaska\n     * zmienia todos - [{id: 123, name: \"costam\", completed: true|false}, ...]\n     * togglujac status completed dla danego obiektu\n     */\n    const toggleCompleted = (taskId) => {\n        todosDispatch({ type: \"todosToggleCompletedOne\", todoId: taskId });\n    };\n\n    /**\n     * updateuje pole input z nazwa taska (do dodania) wpisana przez uzytkownika\n     * @param {event} e - event triggerowany przez zmiane pola input\n     */\n    const updateTaskToAdd = (e) => {\n        setTaskToAdd(e.target.value);\n    };\n\n    /**\n     * zwraca pierwsze wolne id todosa, max+1\n     * @param {Object[]} todos - todosy z ktorych beda brane id do analizy\n     */\n    const getFirstFreeId = (todos) => {\n        let usedIds = todos.map((todo) => {\n            return todo.id;\n        });\n        let maxId = usedIds.length === 0 ? 0 : Math.max(...usedIds);\n        return maxId + 1;\n    };\n\n    /**\n     * dodaje taska z pola input do todos\n     * [{id: 123, name: \"costam\", completed: true|false}, ...]\n     * @param {string} newTaskDesc - nowe name do dodania\n     * przydziela dodanemu taskowi domyslny status completed: false\n     * przydziela dodanemu taskowi unikalne id\n     */\n    const addTaskToList = (newTaskDesc) => {\n        if (newTaskDesc.trim() === \"\") {\n            // no empty fields allowed to add\n            alert(\"please provide task description\");\n        } else if (!newTaskDesc.trim().match(/[a-zA-Z]+/)) {\n            alert(\"Task title must contain at least 1 alphabetic character\");\n        } else {\n            let newId = getFirstFreeId(todosState.todos);\n            todosDispatch({\n                type: \"todosAddOne\",\n                payload: { id: newId, name: newTaskDesc.trim(), completed: false },\n            });\n        }\n        setTaskToAdd(\"\");\n    };\n\n    /**\n     * usuwa dany task z listy todos-ow\n     * @param {number} idToRemove - id taska do usuniecia\n     * (id sa unikalne w obrebie todos)\n     * zmienia todosState.todos\n     */\n    const remTaskFromList = (idToRemove) => {\n        todosDispatch({ type: \"todosRemoveOne\", todoId: idToRemove });\n    };\n\n    /**\n     * usuwa wszystkie taski z listy todos\n     */\n    const remAllTasks = () => {\n        todosDispatch({ type: \"todosRemoveAll\" });\n    };\n\n    return (\n        <div>\n            <span>Welcome to our TODO app! </span>\n            <Button\n                className=\"normalBut\"\n                btnText=\"logout\"\n                onClick={() => {\n                    logout();\n                }}\n            />\n            <TodoHeader\n                adderTaskToAdd={taskToAdd}\n                adderUpdateTaskToAdd={updateTaskToAdd}\n                adderAddTaskToList={addTaskToList}\n                remAllBtnRemAllTasks={remAllTasks}\n                sorterSortTasks={sortTasks}\n                sorterSortOrder={sortAsc ? \"A to Z\" : \"Z to A\"}\n                filter1Msg=\"Show Completed\"\n                filter1Checked={showCompleted}\n                filter1OnChange={toggleShowCompleted}\n                filter2Msg=\"Show Pending\"\n                filter2Checked={showPending}\n                filter2OnChange={toggleShowPending}\n            />\n            {showCompleted && (\n                <TodoList\n                    listName=\"Completed tasks:\"\n                    todos={todosState.todos.filter((t) => {\n                        return t.completed;\n                    })}\n                    toggleCompleted={toggleCompleted}\n                    onClickButton={remTaskFromList}\n                />\n            )}\n            <br />\n            {showPending && (\n                <TodoList\n                    listName=\"Pending tasks:\"\n                    todos={todosState.todos.filter((t) => {\n                        return !t.completed;\n                    })}\n                    toggleCompleted={toggleCompleted}\n                    onClickButton={remTaskFromList}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default TodosPage;\n","import React from \"react\";\nimport {\n    // BrowserRouter as Router,\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nimport { authContext, AuthProvider } from \"./components/AuthProvider\";\nimport LandingPage from \"./conteners/LandingPage\";\nimport TodoItem from \"./conteners/todos/TodoItem\";\nimport TodosPage from \"./conteners/TodosPage\";\n\nexport const UserContext = React.createContext({});\n\nfunction App(props) {\n    const ProtectedRoute = ({ children }) => {\n        const { isAuthenticated } = React.useContext(authContext);\n        if (isAuthenticated) {\n            return children;\n        }\n        return <Redirect to={{ pathname: \"/login\" }} />;\n    };\n\n    return (\n        <Router>\n            <AuthProvider>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <LandingPage />\n                    </Route>\n                    <Route exact path=\"/login\">\n                        <LandingPage />\n                    </Route>\n                    <Route exact path=\"/todos\">\n                        <ProtectedRoute>\n                            <TodosPage />\n                        </ProtectedRoute>\n                    </Route>\n                    <Route exact path=\"/todos/:id\">\n                        <ProtectedRoute>\n                            <TodoItem />\n                        </ProtectedRoute>\n                    </Route>\n                    <Route path=\"*\">{() => \"404 NOT FOUND\"}</Route>\n                </Switch>\n            </AuthProvider>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}